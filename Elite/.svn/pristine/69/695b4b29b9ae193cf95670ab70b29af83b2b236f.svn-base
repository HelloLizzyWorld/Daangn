package com.elite.daangn;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.elite.service.PageService;
import com.elite.service.ProductService;
import com.elite.vo.DaangnJusoVO;
import com.elite.vo.DaangnMemberVO;
import com.elite.vo.DaangnProductVO;
import com.elite.vo.DaangnReviewVO;
import com.elite.vo.SessionVO;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Controller
public class ProductController {
	@Resource(name = "productService")
	private ProductService productService;
	@Resource(name = "pageService")
	private PageService pageService;

	// 물품 등록 페이지
	@RequestMapping(value = "/product_write.carrot", method = RequestMethod.GET)
	public String product_write() {
		return "/product/product_write";
	}

	// 물품 등록 과정
	@RequestMapping(value = "/product_write_proc.carrot", method = RequestMethod.POST)
	@ResponseBody
	public String product_write_proc(DaangnProductVO vo, HttpSession session,
			HttpServletRequest request, @RequestParam("fileList")List<MultipartFile> fileList)
					throws Exception {
		String success = "";
		SessionVO svo = (SessionVO) session.getAttribute("svo");
		vo.setId(svo.getId());
		
		//잘 가져오는지 출력해보기
/*		for(MultipartFile file : fileList){
			System.out.println("fileList Name : " + file.getOriginalFilename());
		}*/
		
		boolean result = productService.productInsert(vo,request,fileList);
		if(result) success="success";
		return success;
	}

	// 물품 목록
	@RequestMapping(value = "/product_list.carrot", method = RequestMethod.GET)
	public ModelAndView product_list(String category, String rpage,String keyword) {
		ModelAndView mv = new ModelAndView();
		ArrayList<DaangnProductVO> list = new ArrayList<DaangnProductVO>();
		list = (ArrayList<DaangnProductVO>) pageService.getPageList(rpage, "product", category, 20).get("list");
		System.out.println("컨트롤러="+category);
		System.out.println("컨트롤러="+keyword);
		//product 검색

		
		// select box 시도 데이터 가져오기
		ArrayList<DaangnJusoVO> sido = productService.getSido();
		//System.out.println("product controller : "+sido.get(0).getSido());
		mv.addObject("sido", sido);
		
		mv.addObject("list", list);
		mv.addObject("dbCount", pageService.getDbProductCount("product", category));
		/*mv.addObject("dbCount2",pageService.getSearchDbCount2(keyword));*/
		mv.addObject("pageSize", pageService.getPageSize());
		mv.addObject("rpage", pageService.getReqPage());
		mv.addObject("category", category);
		mv.setViewName("/product/product_list");
		return mv;
	}

	// 물품 상태 변경
	@RequestMapping(value = "/product_state_change.carrot", method = RequestMethod.GET)
	@ResponseBody
	public String product_state_change(String pid, String pstate) {
		int result = productService.getPstateUpdate(pid, pstate);
		return String.valueOf(result);
	}

	// 물품 날짜 수정
	@RequestMapping(value = "/product_update_date.carrot", method = RequestMethod.GET)
	@ResponseBody
	public String product_update_date(String pid) {
		System.out.println("update date controller : " + pid);
		int result = productService.getPdateUpdate(pid);
		return String.valueOf(result);
	}

	// 물품 수정 전 내용 불러오기
	@RequestMapping(value = "/product_update.carrot", method = RequestMethod.GET)
	public ModelAndView product_update(String pid) {
		ModelAndView mv = new ModelAndView("/product/product_update");
		DaangnProductVO vo = productService.getProductContent(pid);
		mv.addObject("vo", vo);
		return mv;
	}
	
	//물품 삭제
	@RequestMapping(value = "/product_delete.carrot", method = RequestMethod.GET)
	public String product_delete(String pid) {
		productService.getProductDelete(pid);
		
		return "redirect:/mypage_sales.carrot";
	}

	// 물품 등록 과정
	@RequestMapping(value = "/product_update_proc.carrot", method = RequestMethod.POST)
	public String product_update_proc(DaangnProductVO vo, HttpSession session) {
		String result = "";
		System.out.println("cpid - " + vo.getPid());
		System.out.println("cpcate - " + vo.getPcate());
		System.out.println("cptitle - " + vo.getPtitle());
		System.out.println("cptype - " + vo.getPtype());
		System.out.println("cpprice - " + vo.getPprice());
		System.out.println("cpcontent - " + vo.getPcontent());

		int iresult = productService.productUpdate(vo);

		if (iresult != 0)
			result = "redirect:/mypage_sales.carrot";
		return result;
	}
	
	// 해당 시도에 따른 시군구 가져오기
	@ResponseBody
	@RequestMapping(value="/juso_sigungu.carrot",method=RequestMethod.GET, produces = "application/text; charset=utf8")
	public String getSigungu(String sido){
		ArrayList<DaangnJusoVO> sigunguList = new ArrayList<DaangnJusoVO>();
		sigunguList = productService.getSigungu(sido);
		
		Gson gson = new GsonBuilder().create();
		String sigungu = gson.toJson(sigunguList);
		
		return sigungu;
	}
	// 해당 시군구에 따른 동 가져오기
	@ResponseBody
	@RequestMapping(value="/juso_hname.carrot",method=RequestMethod.GET, produces = "application/text; charset=utf8")
	public String getHname(String sigungu){
		ArrayList<DaangnJusoVO> hnameList = new ArrayList<DaangnJusoVO>();
		hnameList = productService.getHname(sigungu);
		
		Gson gson = new GsonBuilder().create();
		String hname = gson.toJson(hnameList);
		
		return hname;
	}
	
	//상품 검색 페이징
	@RequestMapping(value="/search.carrot", method = RequestMethod.GET)
	public ModelAndView search(String keyword){
		ModelAndView mv = new ModelAndView();
		ArrayList<DaangnProductVO> list = new ArrayList<DaangnProductVO>();
		
		list = productService.getSearch(keyword);
		
		mv.addObject("list",list);
		mv.addObject("keyword",keyword);
		mv.setViewName("/product/product_list");
		
		return mv;
	}
	
	//지선이방법 상품검색
	/*@RequestMapping(value="/search.carrot", method = RequestMethod.GET)
	public ModelAndView search(String rpage,String keyword){
		ModelAndView mv = new ModelAndView();
		System.out.println(keyword);
		System.out.println(rpage);
		ArrayList<DaangnProductVO> list = new ArrayList<DaangnProductVO>();
		int rpage2 =Integer.parseInt(rpage);
		list =(ArrayList<DaangnProductVO>) pageService.getSearchList2(rpage2,keyword).get("list");
		
		mv.addObject("list",list);
		mv.addObject("dbCount",pageService.getSearchDbCount(keyword));
		mv.addObject("pageSize",pageService.getPageSize());
		mv.addObject("rpage",pageService.getReqPage());
		mv.addObject("keyword",keyword);
		mv.setViewName("/product/product_list");
		
		return mv;
	}*/

	
	// 판매하는 물품 정보 가져오기
	@ResponseBody
	@RequestMapping(value="/sale_product_data.carrot", method=RequestMethod.GET, produces = "application/text; charset=utf8")
	public String getSaleProductData(String pid){
		DaangnProductVO productData = productService.getSaleProductData(pid);
		
		Gson gson = new GsonBuilder().create();
		String product = gson.toJson(productData);
		return product;
	}
	
	//판매 할 상품 채팅 목록 가져오기
	@ResponseBody
	@RequestMapping(value="/chat_list.carrot", method=RequestMethod.GET, produces = "application/text; charset=utf8")
	public String getChatList(String pid, HttpSession session){
		SessionVO svo = (SessionVO) session.getAttribute("svo");
		String rid = svo.getId();
		
		ArrayList<DaangnMemberVO> chatList = new ArrayList<DaangnMemberVO>();
		chatList = productService.getChatList(pid, rid);
		
		Gson gson = new GsonBuilder().create();
		String chat = gson.toJson(chatList);
		//System.out.println(chat);
		
		return chat;
	}
	
	// 리뷰 & 구매 등록
	@ResponseBody
	@RequestMapping(value="/sales_review.carrot", method=RequestMethod.POST)
	public boolean sales_review(DaangnReviewVO vo){
		boolean result = productService.getSalesReview(vo);
		return result;
	}

	
}
